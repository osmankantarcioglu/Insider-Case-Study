# Builder stage
FROM golang:1.20-alpine AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache git bash

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download dependencies with verbose output
RUN go mod download -x

# Copy source code
COPY . .

# Print directory structure and go version for debugging
RUN echo "Go version:" && go version
RUN echo "Directory structure:" && find . -type f -name "*.go" | sort

# Check for syntax errors first
RUN echo "Checking for syntax errors..."
RUN go vet ./...

# Verify packages
RUN echo "Verifying packages..."
RUN go list ./...

# Build with detailed error output
RUN echo "Building application..." && \
    CGO_ENABLED=0 GOOS=linux go build -v -x -o main ./cmd

# Runtime stage
FROM alpine:latest

# Set working directory
WORKDIR /app

# Install PostgreSQL client for database interactions
RUN apk --no-cache add postgresql-client

# Copy binary from builder stage
COPY --from=builder /app/main .

# Copy database schema
COPY --from=builder /app/database/sql_schema.sql ./database/

# Copy static files
COPY --from=builder /app/utils/static ./utils/static

# Expose application port
EXPOSE 8080

# Run the binary
CMD ["./main"] 